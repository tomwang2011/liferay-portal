{"version":3,"sources":["Slider.js"],"names":[],"mappings":"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","file":"../../../node_modules/metal-slider/src/Slider.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport Component from 'metal-component';\nimport { Drag } from 'metal-drag-drop';\nimport Position from 'metal-position';\nimport Soy from 'metal-soy';\n\nimport templates from './Slider.soy.js';\n\n/**\n * Slider component.\n */\nclass Slider extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\t/**\n\t\t * Manages dragging the rail handle to update the slider value.\n\t\t * @type {Drag}\n\t\t * @protected\n\t\t */\n\t\tthis.drag_ = new Drag({\n\t\t\taxis: 'x',\n\t\t\tconstrain: this.constrainToRail_.bind(this),\n\t\t\tcontainer: this.element,\n\t\t\thandles: '.handle',\n\t\t\tsources: '.rail-handle'\n\t\t});\n\t\tthis.on('elementChanged', this.handleElementChanged_);\n\n\t\tthis.attachDragEvents_();\n\t}\n\n\t/**\n\t * Attaches the drag events to handle value updates when dragging the rail handle.\n\t * protected\n\t */\n\tattachDragEvents_() {\n\t\tthis.drag_.on(Drag.Events.DRAG, this.updateValueFromDragData_.bind(this));\n\t\tthis.drag_.on(Drag.Events.END, this.updateValueFromDragData_.bind(this));\n\t}\n\n\t/**\n\t * Constrains the given region to be inside the rail. This is being used\n\t * instead of `Drag`'s default behavior, because `Drag` would require the\n\t * whole handle to be inside the rail element, while we just want to make sure\n\t * that the left side of the handle is inside it.\n\t * @param {!Object} region\n\t * @protected\n\t */\n\tconstrainToRail_(region) {\n\t\tconst rail = this.element.querySelector('.rail');\n\t\tconst constrain = Position.getRegion(rail, true);\n\t\tif (region.left < constrain.left) {\n\t\t\tregion.left = constrain.left;\n\t\t} else if (region.left > constrain.right) {\n\t\t\tregion.left -= region.left - constrain.right;\n\t\t}\n\t\tregion.right = region.left + region.width;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.drag_.dispose();\n\t}\n\n\t/**\n\t * Returns the `Drag` instance being used.\n\t * @return {!Drag}\n\t */\n\tgetDrag() {\n\t\treturn this.drag_;\n\t}\n\n\t/**\n\t * Handles the `elementChanged` event. Updates the drag container to the new\n\t * element, and also updates the constrain element.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\thandleElementChanged_(data) {\n\t\tif (data.newVal) {\n\t\t\tthis.drag_.container = data.newVal;\n\t\t}\n\t}\n\n\t/**\n\t * Handles mouse down actions on the slider rail and updates the slider value accordingly.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\tonRailMouseDown_(event) {\n\t\tif (dom.hasClass(event.target, 'rail') || dom.hasClass(event.target, 'rail-active')) {\n\t\t\tconst prevValue = this.value;\n\t\t\tthis.updateValue_(event.offsetX, 0, true);\n\t\t\tif (prevValue === this.value) {\n\t\t\t\tconst handleRegion = Position.getRegion(this.element.querySelector('.handle'));\n\t\t\t\tif (event.offsetX < handleRegion.left) {\n\t\t\t\t\tthis.value -= 1;\n\t\t\t\t} else {\n\t\t\t\t\tthis.value += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Synchronizes the slider UI with the `max` state key.\n\t * @param {number} newVal The new value of the state key.\n\t */\n\tsyncMax(newVal) {\n\t\tif (newVal < this.value) {\n\t\t\tthis.value = newVal;\n\t\t}\n\t}\n\n\t/**\n\t * Synchronizes the slider UI with the `min` state key.\n\t * @param {number} newVal The new value of the state key.\n\t */\n\tsyncMin(newVal) {\n\t\tif (newVal > this.value) {\n\t\t\tthis.value = newVal;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the slider value based on the UI state of the handle element.\n\t * @param {number} handlePosition Position of the handle in px.\n\t * @param {number} offset Offset to be added to normalize relative inputs.\n\t * @param {boolean=} opt_relative If the given position is relative to the\n\t *     rail or not.\n\t * @protected\n\t */\n\tupdateValue_(handlePosition, offset, opt_relative) {\n\t\tvar region = Position.getRegion(this.element);\n\t\tif (!opt_relative) {\n\t\t\thandlePosition -= region.left;\n\t\t}\n\t\tthis.value = Math.round(offset + (handlePosition / region.width) * (this.max - this.min));\n\t}\n\n\t/**\n\t * Handles Drag events from the rail handle and updates the slider value accordingly.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\tupdateValueFromDragData_(data, event) {\n\t\tthis.updateValue_(data.x, this.min);\n\t\tevent.preventDefault();\n\t}\n}\nSoy.register(Slider, templates);\n\n/**\n * `Slider`'s state definition.\n */\nSlider.STATE = {\n\t/**\n\t * Name of the hidden input field that holds the slider value. Useful when slider is embedded\n\t * inside a form so it can automatically send its value.\n\t * @type {string}\n\t */\n\tinputName: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Defines the maximum value handled by the slider.\n\t * @type {number}\n\t * @default 100\n\t */\n\tmax: {\n\t\tvalue: 100\n\t},\n\n\t/**\n\t * Defines the minimum value handled by the slider.\n\t * @type {number}\n\t * @default 0\n\t */\n\tmin: {\n\t\tvalue: 0\n\t},\n\n\t/**\n\t * Defines the currently selected value on the slider.\n\t * @type {number}\n\t * @default 0\n\t */\n\tvalue: {\n\t\tvalidator: function(val) {\n\t\t\treturn core.isNumber(val) && this.min <= val && val <= this.max;\n\t\t},\n\t\tvalue: 0\n\t}\n};\n\nexport default Slider;\n"],"sourceRoot":"/source/"}