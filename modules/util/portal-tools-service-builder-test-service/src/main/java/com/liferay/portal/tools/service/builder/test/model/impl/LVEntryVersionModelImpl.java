/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.tools.service.builder.test.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.petra.string.StringBundler;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.model.version.VersionedModelInvocationHandler;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.tools.service.builder.test.model.LVEntry;
import com.liferay.portal.tools.service.builder.test.model.LVEntryVersion;
import com.liferay.portal.tools.service.builder.test.model.LVEntryVersionModel;

import java.io.Serializable;

import java.lang.reflect.Method;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LVEntryVersion service. Represents a row in the &quot;LVEntryVersion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LVEntryVersionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LVEntryVersionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LVEntryVersionImpl
 * @see LVEntryVersion
 * @see LVEntryVersionModel
 * @generated
 */
@ProviderType
public class LVEntryVersionModelImpl extends BaseModelImpl<LVEntryVersion>
	implements LVEntryVersionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lv entry version model instance should use the {@link LVEntryVersion} interface instead.
	 */
	public static final String TABLE_NAME = "LVEntryVersion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lvEntryVersionId", Types.BIGINT },
			{ "version", Types.INTEGER },
			{ "defaultLanguageId", Types.VARCHAR },
			{ "lvEntryId", Types.BIGINT },
			{ "groupId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lvEntryVersionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("version", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("defaultLanguageId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lvEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table LVEntryVersion (lvEntryVersionId LONG not null primary key,version INTEGER,defaultLanguageId VARCHAR(75) null,lvEntryId LONG,groupId LONG)";
	public static final String TABLE_SQL_DROP = "drop table LVEntryVersion";
	public static final String ORDER_BY_JPQL = " ORDER BY lvEntryVersion.version DESC";
	public static final String ORDER_BY_SQL = " ORDER BY LVEntryVersion.version DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.portal.tools.service.builder.test.model.LVEntryVersion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.portal.tools.service.builder.test.model.LVEntryVersion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.tools.service.builder.test.model.LVEntryVersion"),
			true);
	public static final long GROUPID_COLUMN_BITMASK = 1L;
	public static final long LVENTRYID_COLUMN_BITMASK = 2L;
	public static final long VERSION_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.portal.tools.service.builder.test.model.LVEntryVersion"));

	public LVEntryVersionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lvEntryVersionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLvEntryVersionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lvEntryVersionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LVEntryVersion.class;
	}

	@Override
	public String getModelClassName() {
		return LVEntryVersion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lvEntryVersionId", getLvEntryVersionId());
		attributes.put("version", getVersion());
		attributes.put("defaultLanguageId", getDefaultLanguageId());
		attributes.put("lvEntryId", getLvEntryId());
		attributes.put("groupId", getGroupId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lvEntryVersionId = (Long)attributes.get("lvEntryVersionId");

		if (lvEntryVersionId != null) {
			setLvEntryVersionId(lvEntryVersionId);
		}

		Integer version = (Integer)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String defaultLanguageId = (String)attributes.get("defaultLanguageId");

		if (defaultLanguageId != null) {
			setDefaultLanguageId(defaultLanguageId);
		}

		Long lvEntryId = (Long)attributes.get("lvEntryId");

		if (lvEntryId != null) {
			setLvEntryId(lvEntryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}
	}

	@Override
	public long getVersionedModelId() {
		return getLvEntryId();
	}

	@Override
	public void populateVersionedModel(LVEntry lvEntry) {
		lvEntry.setDefaultLanguageId(getDefaultLanguageId());
		lvEntry.setGroupId(getGroupId());
	}

	@Override
	public void setVersionedModelId(long lvEntryId) {
		setLvEntryId(lvEntryId);
	}

	@Override
	public LVEntry toVersionedModel() {
		if (_lvEntry == null) {
			_lvEntry = (LVEntry)ProxyUtil.newProxyInstance(_classLoader,
					_versionedModelInterfaces,
					new VersionedModelInvocationHandler(this,
						_versionedModelMethodsMap));
		}

		return _lvEntry;
	}

	@Override
	public long getLvEntryVersionId() {
		return _lvEntryVersionId;
	}

	@Override
	public void setLvEntryVersionId(long lvEntryVersionId) {
		_lvEntryVersionId = lvEntryVersionId;
	}

	@Override
	public int getVersion() {
		return _version;
	}

	@Override
	public void setVersion(int version) {
		_columnBitmask = -1L;

		if (!_setOriginalVersion) {
			_setOriginalVersion = true;

			_originalVersion = _version;
		}

		_version = version;
	}

	public int getOriginalVersion() {
		return _originalVersion;
	}

	@Override
	public String getDefaultLanguageId() {
		if (_defaultLanguageId == null) {
			return "";
		}
		else {
			return _defaultLanguageId;
		}
	}

	@Override
	public void setDefaultLanguageId(String defaultLanguageId) {
		_defaultLanguageId = defaultLanguageId;
	}

	@Override
	public long getLvEntryId() {
		return _lvEntryId;
	}

	@Override
	public void setLvEntryId(long lvEntryId) {
		_columnBitmask |= LVENTRYID_COLUMN_BITMASK;

		if (!_setOriginalLvEntryId) {
			_setOriginalLvEntryId = true;

			_originalLvEntryId = _lvEntryId;
		}

		_lvEntryId = lvEntryId;
	}

	public long getOriginalLvEntryId() {
		return _originalLvEntryId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LVEntryVersion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LVEntryVersion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LVEntryVersion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LVEntryVersionImpl lvEntryVersionImpl = new LVEntryVersionImpl();

		lvEntryVersionImpl.setLvEntryVersionId(getLvEntryVersionId());
		lvEntryVersionImpl.setVersion(getVersion());
		lvEntryVersionImpl.setDefaultLanguageId(getDefaultLanguageId());
		lvEntryVersionImpl.setLvEntryId(getLvEntryId());
		lvEntryVersionImpl.setGroupId(getGroupId());

		lvEntryVersionImpl.resetOriginalValues();

		return lvEntryVersionImpl;
	}

	@Override
	public int compareTo(LVEntryVersion lvEntryVersion) {
		int value = 0;

		if (getVersion() < lvEntryVersion.getVersion()) {
			value = -1;
		}
		else if (getVersion() > lvEntryVersion.getVersion()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LVEntryVersion)) {
			return false;
		}

		LVEntryVersion lvEntryVersion = (LVEntryVersion)obj;

		long primaryKey = lvEntryVersion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LVEntryVersionModelImpl lvEntryVersionModelImpl = this;

		lvEntryVersionModelImpl._originalVersion = lvEntryVersionModelImpl._version;

		lvEntryVersionModelImpl._setOriginalVersion = false;

		lvEntryVersionModelImpl._originalLvEntryId = lvEntryVersionModelImpl._lvEntryId;

		lvEntryVersionModelImpl._setOriginalLvEntryId = false;

		lvEntryVersionModelImpl._originalGroupId = lvEntryVersionModelImpl._groupId;

		lvEntryVersionModelImpl._setOriginalGroupId = false;

		lvEntryVersionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LVEntryVersion> toCacheModel() {
		LVEntryVersionCacheModel lvEntryVersionCacheModel = new LVEntryVersionCacheModel();

		lvEntryVersionCacheModel.lvEntryVersionId = getLvEntryVersionId();

		lvEntryVersionCacheModel.version = getVersion();

		lvEntryVersionCacheModel.defaultLanguageId = getDefaultLanguageId();

		String defaultLanguageId = lvEntryVersionCacheModel.defaultLanguageId;

		if ((defaultLanguageId != null) && (defaultLanguageId.length() == 0)) {
			lvEntryVersionCacheModel.defaultLanguageId = null;
		}

		lvEntryVersionCacheModel.lvEntryId = getLvEntryId();

		lvEntryVersionCacheModel.groupId = getGroupId();

		return lvEntryVersionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{lvEntryVersionId=");
		sb.append(getLvEntryVersionId());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", defaultLanguageId=");
		sb.append(getDefaultLanguageId());
		sb.append(", lvEntryId=");
		sb.append(getLvEntryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.portal.tools.service.builder.test.model.LVEntryVersion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lvEntryVersionId</column-name><column-value><![CDATA[");
		sb.append(getLvEntryVersionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultLanguageId</column-name><column-value><![CDATA[");
		sb.append(getDefaultLanguageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lvEntryId</column-name><column-value><![CDATA[");
		sb.append(getLvEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LVEntryVersion.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LVEntryVersion.class, ModelWrapper.class
		};
	private static final Map<Method, Method> _versionedModelMethodsMap = new HashMap<Method, Method>();
	private static final Class<?>[] _versionedModelInterfaces = new Class<?>[] {
			LVEntry.class
		};

	static {
		try {
			_versionedModelMethodsMap.put(LVEntry.class.getMethod(
					"getPrimaryKey"),
				LVEntryVersion.class.getMethod("getVersionedModelId"));

			_versionedModelMethodsMap.put(LVEntry.class.getMethod(
					"getDefaultLanguageId"),
				LVEntryVersion.class.getMethod("getDefaultLanguageId"));

			_versionedModelMethodsMap.put(LVEntry.class.getMethod(
					"getLvEntryId"),
				LVEntryVersion.class.getMethod("getLvEntryId"));

			_versionedModelMethodsMap.put(LVEntry.class.getMethod("getGroupId"),
				LVEntryVersion.class.getMethod("getGroupId"));
		}
		catch (ReflectiveOperationException roe) {
			throw new ExceptionInInitializerError(roe);
		}
	}

	private volatile LVEntry _lvEntry;
	private long _lvEntryVersionId;
	private int _version;
	private int _originalVersion;
	private boolean _setOriginalVersion;
	private String _defaultLanguageId;
	private long _lvEntryId;
	private long _originalLvEntryId;
	private boolean _setOriginalLvEntryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _columnBitmask;
	private LVEntryVersion _escapedModel;
}