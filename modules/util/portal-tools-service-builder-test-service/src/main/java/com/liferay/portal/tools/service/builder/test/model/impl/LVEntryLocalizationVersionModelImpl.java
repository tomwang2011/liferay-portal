/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.tools.service.builder.test.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.petra.string.StringBundler;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.model.version.VersionedModelInvocationHandler;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.tools.service.builder.test.model.LVEntryLocalization;
import com.liferay.portal.tools.service.builder.test.model.LVEntryLocalizationVersion;
import com.liferay.portal.tools.service.builder.test.model.LVEntryLocalizationVersionModel;

import java.io.Serializable;

import java.lang.reflect.Method;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LVEntryLocalizationVersion service. Represents a row in the &quot;LVEntryLocalizationVersion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LVEntryLocalizationVersionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LVEntryLocalizationVersionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LVEntryLocalizationVersionImpl
 * @see LVEntryLocalizationVersion
 * @see LVEntryLocalizationVersionModel
 * @generated
 */
@ProviderType
public class LVEntryLocalizationVersionModelImpl extends BaseModelImpl<LVEntryLocalizationVersion>
	implements LVEntryLocalizationVersionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lv entry localization version model instance should use the {@link LVEntryLocalizationVersion} interface instead.
	 */
	public static final String TABLE_NAME = "LVEntryLocalizationVersion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lvEntryLocalizationVersionId", Types.BIGINT },
			{ "version", Types.INTEGER },
			{ "lvEntryLocalizationId", Types.BIGINT },
			{ "lvEntryId", Types.BIGINT },
			{ "languageId", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "content", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lvEntryLocalizationVersionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("version", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("lvEntryLocalizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lvEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("languageId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LVEntryLocalizationVersion (lvEntryLocalizationVersionId LONG not null primary key,version INTEGER,lvEntryLocalizationId LONG,lvEntryId LONG,languageId VARCHAR(75) null,title VARCHAR(75) null,content VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LVEntryLocalizationVersion";
	public static final String ORDER_BY_JPQL = " ORDER BY lvEntryLocalizationVersion.version DESC";
	public static final String ORDER_BY_SQL = " ORDER BY LVEntryLocalizationVersion.version DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.portal.tools.service.builder.test.model.LVEntryLocalizationVersion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.portal.tools.service.builder.test.model.LVEntryLocalizationVersion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.tools.service.builder.test.model.LVEntryLocalizationVersion"),
			true);
	public static final long LANGUAGEID_COLUMN_BITMASK = 1L;
	public static final long LVENTRYID_COLUMN_BITMASK = 2L;
	public static final long LVENTRYLOCALIZATIONID_COLUMN_BITMASK = 4L;
	public static final long VERSION_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.portal.tools.service.builder.test.model.LVEntryLocalizationVersion"));

	public LVEntryLocalizationVersionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lvEntryLocalizationVersionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLvEntryLocalizationVersionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lvEntryLocalizationVersionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LVEntryLocalizationVersion.class;
	}

	@Override
	public String getModelClassName() {
		return LVEntryLocalizationVersion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lvEntryLocalizationVersionId",
			getLvEntryLocalizationVersionId());
		attributes.put("version", getVersion());
		attributes.put("lvEntryLocalizationId", getLvEntryLocalizationId());
		attributes.put("lvEntryId", getLvEntryId());
		attributes.put("languageId", getLanguageId());
		attributes.put("title", getTitle());
		attributes.put("content", getContent());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lvEntryLocalizationVersionId = (Long)attributes.get(
				"lvEntryLocalizationVersionId");

		if (lvEntryLocalizationVersionId != null) {
			setLvEntryLocalizationVersionId(lvEntryLocalizationVersionId);
		}

		Integer version = (Integer)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		Long lvEntryLocalizationId = (Long)attributes.get(
				"lvEntryLocalizationId");

		if (lvEntryLocalizationId != null) {
			setLvEntryLocalizationId(lvEntryLocalizationId);
		}

		Long lvEntryId = (Long)attributes.get("lvEntryId");

		if (lvEntryId != null) {
			setLvEntryId(lvEntryId);
		}

		String languageId = (String)attributes.get("languageId");

		if (languageId != null) {
			setLanguageId(languageId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}
	}

	@Override
	public long getVersionedModelId() {
		return getLvEntryLocalizationId();
	}

	@Override
	public void populateVersionedModel(LVEntryLocalization lvEntryLocalization) {
		lvEntryLocalization.setLvEntryId(getLvEntryId());
		lvEntryLocalization.setLanguageId(getLanguageId());
		lvEntryLocalization.setTitle(getTitle());
		lvEntryLocalization.setContent(getContent());
	}

	@Override
	public void setVersionedModelId(long lvEntryLocalizationId) {
		setLvEntryLocalizationId(lvEntryLocalizationId);
	}

	@Override
	public LVEntryLocalization toVersionedModel() {
		if (_lvEntryLocalization == null) {
			_lvEntryLocalization = (LVEntryLocalization)ProxyUtil.newProxyInstance(_classLoader,
					_versionedModelInterfaces,
					new VersionedModelInvocationHandler(this,
						_versionedModelMethodsMap));
		}

		return _lvEntryLocalization;
	}

	@Override
	public long getLvEntryLocalizationVersionId() {
		return _lvEntryLocalizationVersionId;
	}

	@Override
	public void setLvEntryLocalizationVersionId(
		long lvEntryLocalizationVersionId) {
		_lvEntryLocalizationVersionId = lvEntryLocalizationVersionId;
	}

	@Override
	public int getVersion() {
		return _version;
	}

	@Override
	public void setVersion(int version) {
		_columnBitmask = -1L;

		if (!_setOriginalVersion) {
			_setOriginalVersion = true;

			_originalVersion = _version;
		}

		_version = version;
	}

	public int getOriginalVersion() {
		return _originalVersion;
	}

	@Override
	public long getLvEntryLocalizationId() {
		return _lvEntryLocalizationId;
	}

	@Override
	public void setLvEntryLocalizationId(long lvEntryLocalizationId) {
		_columnBitmask |= LVENTRYLOCALIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalLvEntryLocalizationId) {
			_setOriginalLvEntryLocalizationId = true;

			_originalLvEntryLocalizationId = _lvEntryLocalizationId;
		}

		_lvEntryLocalizationId = lvEntryLocalizationId;
	}

	public long getOriginalLvEntryLocalizationId() {
		return _originalLvEntryLocalizationId;
	}

	@Override
	public long getLvEntryId() {
		return _lvEntryId;
	}

	@Override
	public void setLvEntryId(long lvEntryId) {
		_columnBitmask |= LVENTRYID_COLUMN_BITMASK;

		if (!_setOriginalLvEntryId) {
			_setOriginalLvEntryId = true;

			_originalLvEntryId = _lvEntryId;
		}

		_lvEntryId = lvEntryId;
	}

	public long getOriginalLvEntryId() {
		return _originalLvEntryId;
	}

	@Override
	public String getLanguageId() {
		if (_languageId == null) {
			return "";
		}
		else {
			return _languageId;
		}
	}

	@Override
	public void setLanguageId(String languageId) {
		_columnBitmask |= LANGUAGEID_COLUMN_BITMASK;

		if (_originalLanguageId == null) {
			_originalLanguageId = _languageId;
		}

		_languageId = languageId;
	}

	public String getOriginalLanguageId() {
		return GetterUtil.getString(_originalLanguageId);
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LVEntryLocalizationVersion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LVEntryLocalizationVersion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LVEntryLocalizationVersion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LVEntryLocalizationVersionImpl lvEntryLocalizationVersionImpl = new LVEntryLocalizationVersionImpl();

		lvEntryLocalizationVersionImpl.setLvEntryLocalizationVersionId(getLvEntryLocalizationVersionId());
		lvEntryLocalizationVersionImpl.setVersion(getVersion());
		lvEntryLocalizationVersionImpl.setLvEntryLocalizationId(getLvEntryLocalizationId());
		lvEntryLocalizationVersionImpl.setLvEntryId(getLvEntryId());
		lvEntryLocalizationVersionImpl.setLanguageId(getLanguageId());
		lvEntryLocalizationVersionImpl.setTitle(getTitle());
		lvEntryLocalizationVersionImpl.setContent(getContent());

		lvEntryLocalizationVersionImpl.resetOriginalValues();

		return lvEntryLocalizationVersionImpl;
	}

	@Override
	public int compareTo(LVEntryLocalizationVersion lvEntryLocalizationVersion) {
		int value = 0;

		if (getVersion() < lvEntryLocalizationVersion.getVersion()) {
			value = -1;
		}
		else if (getVersion() > lvEntryLocalizationVersion.getVersion()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LVEntryLocalizationVersion)) {
			return false;
		}

		LVEntryLocalizationVersion lvEntryLocalizationVersion = (LVEntryLocalizationVersion)obj;

		long primaryKey = lvEntryLocalizationVersion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LVEntryLocalizationVersionModelImpl lvEntryLocalizationVersionModelImpl = this;

		lvEntryLocalizationVersionModelImpl._originalVersion = lvEntryLocalizationVersionModelImpl._version;

		lvEntryLocalizationVersionModelImpl._setOriginalVersion = false;

		lvEntryLocalizationVersionModelImpl._originalLvEntryLocalizationId = lvEntryLocalizationVersionModelImpl._lvEntryLocalizationId;

		lvEntryLocalizationVersionModelImpl._setOriginalLvEntryLocalizationId = false;

		lvEntryLocalizationVersionModelImpl._originalLvEntryId = lvEntryLocalizationVersionModelImpl._lvEntryId;

		lvEntryLocalizationVersionModelImpl._setOriginalLvEntryId = false;

		lvEntryLocalizationVersionModelImpl._originalLanguageId = lvEntryLocalizationVersionModelImpl._languageId;

		lvEntryLocalizationVersionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LVEntryLocalizationVersion> toCacheModel() {
		LVEntryLocalizationVersionCacheModel lvEntryLocalizationVersionCacheModel =
			new LVEntryLocalizationVersionCacheModel();

		lvEntryLocalizationVersionCacheModel.lvEntryLocalizationVersionId = getLvEntryLocalizationVersionId();

		lvEntryLocalizationVersionCacheModel.version = getVersion();

		lvEntryLocalizationVersionCacheModel.lvEntryLocalizationId = getLvEntryLocalizationId();

		lvEntryLocalizationVersionCacheModel.lvEntryId = getLvEntryId();

		lvEntryLocalizationVersionCacheModel.languageId = getLanguageId();

		String languageId = lvEntryLocalizationVersionCacheModel.languageId;

		if ((languageId != null) && (languageId.length() == 0)) {
			lvEntryLocalizationVersionCacheModel.languageId = null;
		}

		lvEntryLocalizationVersionCacheModel.title = getTitle();

		String title = lvEntryLocalizationVersionCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			lvEntryLocalizationVersionCacheModel.title = null;
		}

		lvEntryLocalizationVersionCacheModel.content = getContent();

		String content = lvEntryLocalizationVersionCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			lvEntryLocalizationVersionCacheModel.content = null;
		}

		return lvEntryLocalizationVersionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{lvEntryLocalizationVersionId=");
		sb.append(getLvEntryLocalizationVersionId());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", lvEntryLocalizationId=");
		sb.append(getLvEntryLocalizationId());
		sb.append(", lvEntryId=");
		sb.append(getLvEntryId());
		sb.append(", languageId=");
		sb.append(getLanguageId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", content=");
		sb.append(getContent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.portal.tools.service.builder.test.model.LVEntryLocalizationVersion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lvEntryLocalizationVersionId</column-name><column-value><![CDATA[");
		sb.append(getLvEntryLocalizationVersionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lvEntryLocalizationId</column-name><column-value><![CDATA[");
		sb.append(getLvEntryLocalizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lvEntryId</column-name><column-value><![CDATA[");
		sb.append(getLvEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageId</column-name><column-value><![CDATA[");
		sb.append(getLanguageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LVEntryLocalizationVersion.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LVEntryLocalizationVersion.class, ModelWrapper.class
		};
	private static final Map<Method, Method> _versionedModelMethodsMap = new HashMap<Method, Method>();
	private static final Class<?>[] _versionedModelInterfaces = new Class<?>[] {
			LVEntryLocalization.class
		};

	static {
		try {
			_versionedModelMethodsMap.put(LVEntryLocalization.class.getMethod(
					"getPrimaryKey"),
				LVEntryLocalizationVersion.class.getMethod(
					"getVersionedModelId"));

			_versionedModelMethodsMap.put(LVEntryLocalization.class.getMethod(
					"getLvEntryLocalizationId"),
				LVEntryLocalizationVersion.class.getMethod(
					"getLvEntryLocalizationId"));

			_versionedModelMethodsMap.put(LVEntryLocalization.class.getMethod(
					"getLvEntryId"),
				LVEntryLocalizationVersion.class.getMethod("getLvEntryId"));

			_versionedModelMethodsMap.put(LVEntryLocalization.class.getMethod(
					"getLanguageId"),
				LVEntryLocalizationVersion.class.getMethod("getLanguageId"));

			_versionedModelMethodsMap.put(LVEntryLocalization.class.getMethod(
					"getTitle"),
				LVEntryLocalizationVersion.class.getMethod("getTitle"));

			_versionedModelMethodsMap.put(LVEntryLocalization.class.getMethod(
					"getContent"),
				LVEntryLocalizationVersion.class.getMethod("getContent"));
		}
		catch (ReflectiveOperationException roe) {
			throw new ExceptionInInitializerError(roe);
		}
	}

	private volatile LVEntryLocalization _lvEntryLocalization;
	private long _lvEntryLocalizationVersionId;
	private int _version;
	private int _originalVersion;
	private boolean _setOriginalVersion;
	private long _lvEntryLocalizationId;
	private long _originalLvEntryLocalizationId;
	private boolean _setOriginalLvEntryLocalizationId;
	private long _lvEntryId;
	private long _originalLvEntryId;
	private boolean _setOriginalLvEntryId;
	private String _languageId;
	private String _originalLanguageId;
	private String _title;
	private String _content;
	private long _columnBitmask;
	private LVEntryLocalizationVersion _escapedModel;
}