/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.tools.service.builder.test.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.petra.string.StringBundler;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.tools.service.builder.test.model.LVEntry;
import com.liferay.portal.tools.service.builder.test.model.LVEntryLocalization;
import com.liferay.portal.tools.service.builder.test.model.LVEntryModel;
import com.liferay.portal.tools.service.builder.test.model.LVEntryVersion;
import com.liferay.portal.tools.service.builder.test.service.LVEntryLocalServiceUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

/**
 * The base model implementation for the LVEntry service. Represents a row in the &quot;LVEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LVEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LVEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LVEntryImpl
 * @see LVEntry
 * @see LVEntryModel
 * @generated
 */
@ProviderType
public class LVEntryModelImpl extends BaseModelImpl<LVEntry>
	implements LVEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lv entry model instance should use the {@link LVEntry} interface instead.
	 */
	public static final String TABLE_NAME = "LVEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "mvccVersion", Types.BIGINT },
			{ "headId", Types.BIGINT },
			{ "defaultLanguageId", Types.VARCHAR },
			{ "lvEntryId", Types.BIGINT },
			{ "groupId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("headId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("defaultLanguageId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lvEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table LVEntry (mvccVersion LONG default 0 not null,headId LONG,defaultLanguageId VARCHAR(75) null,lvEntryId LONG not null primary key,groupId LONG)";
	public static final String TABLE_SQL_DROP = "drop table LVEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY lvEntry.lvEntryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LVEntry.lvEntryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.portal.tools.service.builder.test.model.LVEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.portal.tools.service.builder.test.model.LVEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.tools.service.builder.test.model.LVEntry"),
			true);
	public static final long GROUPID_COLUMN_BITMASK = 1L;
	public static final long HEADID_COLUMN_BITMASK = 2L;
	public static final long LVENTRYID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.portal.tools.service.builder.test.model.LVEntry"));

	public LVEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lvEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLvEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lvEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LVEntry.class;
	}

	@Override
	public String getModelClassName() {
		return LVEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("mvccVersion", getMvccVersion());
		attributes.put("headId", getHeadId());
		attributes.put("defaultLanguageId", getDefaultLanguageId());
		attributes.put("lvEntryId", getLvEntryId());
		attributes.put("groupId", getGroupId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long mvccVersion = (Long)attributes.get("mvccVersion");

		if (mvccVersion != null) {
			setMvccVersion(mvccVersion);
		}

		Long headId = (Long)attributes.get("headId");

		if (headId != null) {
			setHeadId(headId);
		}

		String defaultLanguageId = (String)attributes.get("defaultLanguageId");

		if (defaultLanguageId != null) {
			setDefaultLanguageId(defaultLanguageId);
		}

		Long lvEntryId = (Long)attributes.get("lvEntryId");

		if (lvEntryId != null) {
			setLvEntryId(lvEntryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}
	}

	@Override
	public String[] getAvailableLanguageIds() {
		List<LVEntryLocalization> lvEntryLocalizations = LVEntryLocalServiceUtil.getLVEntryLocalizations(getPrimaryKey());

		String[] availableLanguageIds = new String[lvEntryLocalizations.size()];

		for (int i = 0; i < availableLanguageIds.length; i++) {
			LVEntryLocalization lvEntryLocalization = lvEntryLocalizations.get(i);

			availableLanguageIds[i] = lvEntryLocalization.getLanguageId();
		}

		return availableLanguageIds;
	}

	@Override
	public String getTitle() {
		return getTitle(getDefaultLanguageId(), false);
	}

	@Override
	public String getTitle(String languageId) {
		return getTitle(languageId, true);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		if (useDefault) {
			return LocalizationUtil.getLocalization(new Function<String, String>() {
					@Override
					public String apply(String languageId) {
						return _getTitle(languageId);
					}
				}, languageId, getDefaultLanguageId());
		}

		return _getTitle(languageId);
	}

	@Override
	public String getTitleMapAsXML() {
		return LocalizationUtil.getXml(getLanguageIdToTitleMap(),
			getDefaultLanguageId(), "Title");
	}

	@Override
	public Map<String, String> getLanguageIdToTitleMap() {
		Map<String, String> languageIdToTitleMap = new HashMap<String, String>();

		List<LVEntryLocalization> lvEntryLocalizations = LVEntryLocalServiceUtil.getLVEntryLocalizations(getPrimaryKey());

		for (LVEntryLocalization lvEntryLocalization : lvEntryLocalizations) {
			languageIdToTitleMap.put(lvEntryLocalization.getLanguageId(),
				lvEntryLocalization.getTitle());
		}

		return languageIdToTitleMap;
	}

	private String _getTitle(String languageId) {
		LVEntryLocalization lvEntryLocalization = LVEntryLocalServiceUtil.fetchLVEntryLocalization(getPrimaryKey(),
				languageId);

		if (lvEntryLocalization == null) {
			return "";
		}

		return lvEntryLocalization.getTitle();
	}

	@Override
	public String getContent() {
		return getContent(getDefaultLanguageId(), false);
	}

	@Override
	public String getContent(String languageId) {
		return getContent(languageId, true);
	}

	@Override
	public String getContent(String languageId, boolean useDefault) {
		if (useDefault) {
			return LocalizationUtil.getLocalization(new Function<String, String>() {
					@Override
					public String apply(String languageId) {
						return _getContent(languageId);
					}
				}, languageId, getDefaultLanguageId());
		}

		return _getContent(languageId);
	}

	@Override
	public String getContentMapAsXML() {
		return LocalizationUtil.getXml(getLanguageIdToContentMap(),
			getDefaultLanguageId(), "Content");
	}

	@Override
	public Map<String, String> getLanguageIdToContentMap() {
		Map<String, String> languageIdToContentMap = new HashMap<String, String>();

		List<LVEntryLocalization> lvEntryLocalizations = LVEntryLocalServiceUtil.getLVEntryLocalizations(getPrimaryKey());

		for (LVEntryLocalization lvEntryLocalization : lvEntryLocalizations) {
			languageIdToContentMap.put(lvEntryLocalization.getLanguageId(),
				lvEntryLocalization.getContent());
		}

		return languageIdToContentMap;
	}

	private String _getContent(String languageId) {
		LVEntryLocalization lvEntryLocalization = LVEntryLocalServiceUtil.fetchLVEntryLocalization(getPrimaryKey(),
				languageId);

		if (lvEntryLocalization == null) {
			return "";
		}

		return lvEntryLocalization.getContent();
	}

	@Override
	public boolean isHead() {
		if (getHeadId() > 0) {
			return false;
		}

		return true;
	}

	@Override
	public void populateVersionModel(LVEntryVersion lvEntryVersion) {
		lvEntryVersion.setDefaultLanguageId(getDefaultLanguageId());
		lvEntryVersion.setGroupId(getGroupId());
	}

	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@Override
	public long getHeadId() {
		return _headId;
	}

	@Override
	public void setHeadId(long headId) {
		_columnBitmask |= HEADID_COLUMN_BITMASK;

		if (!_setOriginalHeadId) {
			_setOriginalHeadId = true;

			_originalHeadId = _headId;
		}

		_headId = headId;
	}

	public long getOriginalHeadId() {
		return _originalHeadId;
	}

	@Override
	public String getDefaultLanguageId() {
		if (_defaultLanguageId == null) {
			return "";
		}
		else {
			return _defaultLanguageId;
		}
	}

	@Override
	public void setDefaultLanguageId(String defaultLanguageId) {
		_defaultLanguageId = defaultLanguageId;
	}

	@Override
	public long getLvEntryId() {
		return _lvEntryId;
	}

	@Override
	public void setLvEntryId(long lvEntryId) {
		_lvEntryId = lvEntryId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LVEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LVEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LVEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LVEntryImpl lvEntryImpl = new LVEntryImpl();

		lvEntryImpl.setMvccVersion(getMvccVersion());
		lvEntryImpl.setHeadId(getHeadId());
		lvEntryImpl.setDefaultLanguageId(getDefaultLanguageId());
		lvEntryImpl.setLvEntryId(getLvEntryId());
		lvEntryImpl.setGroupId(getGroupId());

		lvEntryImpl.resetOriginalValues();

		return lvEntryImpl;
	}

	@Override
	public int compareTo(LVEntry lvEntry) {
		long primaryKey = lvEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LVEntry)) {
			return false;
		}

		LVEntry lvEntry = (LVEntry)obj;

		long primaryKey = lvEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LVEntryModelImpl lvEntryModelImpl = this;

		lvEntryModelImpl._originalHeadId = lvEntryModelImpl._headId;

		lvEntryModelImpl._setOriginalHeadId = false;

		lvEntryModelImpl._originalGroupId = lvEntryModelImpl._groupId;

		lvEntryModelImpl._setOriginalGroupId = false;

		lvEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LVEntry> toCacheModel() {
		LVEntryCacheModel lvEntryCacheModel = new LVEntryCacheModel();

		lvEntryCacheModel.mvccVersion = getMvccVersion();

		lvEntryCacheModel.headId = getHeadId();

		lvEntryCacheModel.defaultLanguageId = getDefaultLanguageId();

		String defaultLanguageId = lvEntryCacheModel.defaultLanguageId;

		if ((defaultLanguageId != null) && (defaultLanguageId.length() == 0)) {
			lvEntryCacheModel.defaultLanguageId = null;
		}

		lvEntryCacheModel.lvEntryId = getLvEntryId();

		lvEntryCacheModel.groupId = getGroupId();

		return lvEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{mvccVersion=");
		sb.append(getMvccVersion());
		sb.append(", headId=");
		sb.append(getHeadId());
		sb.append(", defaultLanguageId=");
		sb.append(getDefaultLanguageId());
		sb.append(", lvEntryId=");
		sb.append(getLvEntryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portal.tools.service.builder.test.model.LVEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mvccVersion</column-name><column-value><![CDATA[");
		sb.append(getMvccVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>headId</column-name><column-value><![CDATA[");
		sb.append(getHeadId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultLanguageId</column-name><column-value><![CDATA[");
		sb.append(getDefaultLanguageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lvEntryId</column-name><column-value><![CDATA[");
		sb.append(getLvEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LVEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LVEntry.class, ModelWrapper.class
		};
	private long _mvccVersion;
	private long _headId;
	private long _originalHeadId;
	private boolean _setOriginalHeadId;
	private String _defaultLanguageId;
	private long _lvEntryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _columnBitmask;
	private LVEntry _escapedModel;
}